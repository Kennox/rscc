package ch.imedias.rsccfx.model;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

/**
 * TODO: Javadoc comment here.
 */
public class Rscc {
  /**
   * Points to the "docker-build_p2p" folder inside resources, relative to the build path.
   * Important: Make sure to NOT include a / in the beginning or the end.
   */
  private final String pathToResourceDocker;

  private final SystemCommander systemCommander;

  private final StringProperty key = new SimpleStringProperty("");

  /**
   * TODO: Javadoc comment here.
   * Initializes the Rscc model class.
   * @param systemCommander
   */
  public Rscc(SystemCommander systemCommander) {

    this.systemCommander = systemCommander;
    pathToResourceDocker = getClass().getClassLoader().getResource("docker-build_p2p")
        .getFile().toString().replaceFirst("file:","");
  }

  /**
   * TODO: Javadoc comment here.
   * Kills the connection to the keyserver.
   * @param key generated by requestKey().
   */
  public void killConnection(String key) {
    StringBuilder command = new StringBuilder();

    // Execute port_stop.sh with the generated key to kill the connection
    command.append("bash" + " " + pathToResourceDocker + "/");
    command.append("port_stop.sh" + " ");
    command.append(key);

    System.out.println(command.toString());

    systemCommander.executeTerminalCommand(command.toString());
  }

  /**
   * TODO: Javadoc comment here.
   * Requests a token from the key server.
   * @param forwardingPort
   * @param keyServerIp
   * @param keyServerSshPort
   * @param keyServerHttpPort
   * @param isCompressionEnabled
   * @return
   */
  public String requestTokenFromServer(int forwardingPort, String keyServerIp, int keyServerSshPort,
                                       int keyServerHttpPort, boolean isCompressionEnabled) {
    StringBuilder command = new StringBuilder();

    // First, setup the server with use.sh
    command.append("bash" + " " + pathToResourceDocker + "/");
    command.append("use.sh" + " ");
    command.append(keyServerIp + " ");
    command.append(keyServerHttpPort);
    System.out.println(command.toString());
    systemCommander.executeTerminalCommand(command.toString());

    command = new StringBuilder();
    // Execute port_share.sh and get a key as output
    command.append("bash" + " " + pathToResourceDocker + "/");
    command.append("start_x11vnc.sh");
    System.out.println(command.toString());
    return systemCommander.executeTerminalCommand(command.toString());
  }

  /**
   * TODO: Javadoc comment here.
   * Starts connection to the user.
   * @param key
   * @param forwardingPort
   * @param keyServerIp
   * @param keyServerHttpPort
   */
  public void connectToUser(String key, int forwardingPort, String keyServerIp,
                            int keyServerHttpPort) {
    StringBuilder command = new StringBuilder();
    command.append("bash" + " " + pathToResourceDocker + "/");
    command.append("use.sh" + " ");
    command.append(keyServerIp + " ");
    command.append(keyServerHttpPort);
    System.out.println(command.toString());
    systemCommander.executeTerminalCommand(command.toString());

    command = new StringBuilder();

    // Executes start_vncviewer.sh and connects to the user.
    command.append("bash" + " " + pathToResourceDocker + "/");
    command.append("start_vncviewer.sh" + " ");
    command.append(key);
    System.out.println(command.toString());
    systemCommander.executeTerminalCommand(command.toString());
  }

  /**
   * TODO: Javadoc comment here.
   * Starts the VNC server.
   * @param key
   * @param forwardingPort
   */
  public void startVncServer(String key, int forwardingPort) {
    StringBuilder command = new StringBuilder();
    command.append("bash" + " " + pathToResourceDocker + "/");
    command.append("start_vncserver.sh" + " ");
    command.append("--key=" + key);
    System.out.println(command.toString());
    systemCommander.executeTerminalCommand(command.toString());
  }

  /**
   * TODO: Javadoc comment here.
   * Refreshes the key by killing the connection, requesting a new key and starting the server
   * again.
   * @param oldKey
   * @param forwardingPort
   * @param keyServerIp
   * @param keyServerSshPort
   * @param keyServerHttpPort
   * @param isCompressionEnabled
   * @return
   */
  public String refreshKey(String oldKey, int forwardingPort, String keyServerIp,
                           int keyServerSshPort, int keyServerHttpPort,
                           boolean isCompressionEnabled) {
    killConnection(oldKey);
    String newKey = requestTokenFromServer(forwardingPort, keyServerIp, keyServerSshPort,
        keyServerHttpPort, isCompressionEnabled);
    return newKey;
  }

  public StringProperty keyProperty() {
    return key;
  }

  public String getKey() {
    return key.get();
  }
}
